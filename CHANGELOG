-----------------------------------------------------------------------------

                    --- CAEN SpA - Software Division ---

-----------------------------------------------------------------------------

    CAEN Dig2

    Changelog.

-----------------------------------------------------------------------------


v1.6.1 (17/06/2024)
-------------------

Fixes:
- Revert the fix on v1.6.0 about "disabling send operations right after the
    connection" because, at least on Windows, makes the operating system to
    close the communication socket after 2 minutes of inactivity
- Minor performance improvement on DPP-PSD decode.


v1.6.0 (10/06/2024)
-------------------

New features:
- Support for 10G UDP.
- Python demo for Scope and DPP-PSD.
- New demo with support for multiple board with synchronization.
- Add support for connection with dig2://caen.internal/usb?pid=PID as
    alternative to dig2://caen.internal/usb/PID, for consistency with the
    CAEN Dig1 library.
- The maximum socket receive buffer of the hardware endpoint socket,
    can now be adjusted using the rcvbuf query parameter in the connection
    URL (e.g. dig2://192.0.2.1/?rcvbuf=65536). The value, in bytes, is used
    as argument for setsockopt with SO_RCVBUF. The setting applies to every
    hardware endpoints: Raw, RawUDP and OpenData.
- On Linux, autoconf adds -std=c++20 if supported by the compiler.
- Add build tests for Clang 15, 16, 17 and 18, and for GCC 13 and 14.
- Add build tests for multiple versions of Boost (1.67, 1.74 and 1.83)
- Windows build environment updated: MSVC2019 16.11.35 and Boost 1.84.

Fixes:
- Fix value of REAL_TIME_NS, LIVE_TIME_NS and DEAD_TIME_NS of stats endpoint
    on DPP-PSD of 2730.
- Add support for keep alive packets on main communication socket to
    mitigate rare missing data from digitizer, happening expecially on
    commands that clear data, like ClearData, ArmAcquisition and Reset.
    By default the interval is set at 4 seconds but can be adjusted using
    "keepalive" query on the URL (e.g. dig2://192.0.2.1/?keepalive=10).
    It can also be disabled by setting keepalive=0.
- Increase GateOffsetS value on DPP-PSD demo, to be compatible with 2730.
- Application layer message header is now always zero-initialized.
- Endpoint communication improved by disabling send operations right after
    the connection, since the client does not send data on that socket.


v1.5.10 (05/09/2023)
-------------------

New features:
- Support for renamed parameters in new DPP-ZLE CUP releases.

Fixes:
- Removed bad code from Scope demo, introduced on v1.5.9.


v1.5.9 (31/07/2023)
-------------------

New features:
- TIMESTAMP_NS decoded field of DPP-PHA and DPP-PSD endpoints now supports
    the data format of 2730, where the LSB corresponds to 2 ns instead of 8
    ns of 2740/2745. The field now is internally stored as DOUBLE, while
    previously was U64. Assuming sampling period is a power of 2 when
    expressed in nanoseconds, there are no changes in the user experience
    because IEEE 754 double-precision floating point can store exactly
    integers up to 2^53. Since digitizers pass timestamps in 48 bits, any
    value multiplied by a power of 2 (between -1022 and 1023, of course) is
    always stored exactly in a IEEE 754 double-precision floating point
    value.
- Improved error messages generated by CAEN_FELib_SetReadDataFormat.
- Add demo projects to docdir on Linux package. When using the default
    Autoconf prefix, they can be found on /usr/local/share/doc/caen_dig2.
- Minor improvements to demo project. Removed WaveResolution from DPP-PHA and
    DPP-PSD demo because deprecated, to be replaced with a new parameter
    WaveDownsamplingRate available in the next CUP releases. On DPP-ZLE demo,
    now all channels are attached to ITLA by default (previously, only
    channel 0 was used).
- On demo, tinycthread replaced by c11thread from John Tsiombikas and Oliver
    Old. This change is transparent to the user and provides a much more
    robust implementation of C11 threads on Windows.

Changes:
- When using CAEN_FELib_ReadData/CAEN_FELib_HasData with zero timeout, the
    CAEN Dig2 library internally was forcing timeout to 1 ms. Now this
    behavior has been removed, and zero timeout means no wait at all. Note
    that the readout is asynchronous on all the endpoints: a call to
    CAEN_FELib_ReadData/CAEN_FELib_HasData does not directly generate
    communication with the devices, but only checks in internal library
    buffers.

Fixes:
- The check for calls to CAEN_FELib_ReadData/CAEN_FELib_HasData pending on
    other threads on the same endpoint has been improved.


v1.5.8 (12/04/2023)
-------------------

Fixes:
- DPP-ZLE demo made almost identical to Scope demo, using reconstructed
    instead of raw waveforms.
- Fix minor memory leak on Scope demo.


v1.5.7 (16/03/2023)
-------------------

New features:
- New reserved URL host caen.internal to help some special connections:
  - USB: dig2://caen.internal/usb/PID (kept legacy support for dig2://usb:PID)
  - OpenARM: dig2://caen.internal/openarm (just an alias for 172.17.0.1)
- Binaries for aarch64 architecture are now provided by CAEN to help deploy
    on OpenARM.
- Add plot on demo Scope.
- Windows build environment updated: MSVC2019 16.11.23 and Boost 1.81.

Fixes:
- Fix build with Boost version from 1.71 to 1.74.
- Fix a runtime check on raw endpoint implementation.
- Fix plot on DPP-ZLE demo.


v1.5.6 (23/12/2022)
-------------------

Fixes:
- Demo MSVC2015 projects Target Platform Version reverted to "10.0.16299.0"
    because "10.0" introduced on v1.5.5 is never valid.


v1.5.5 (22/12/2022)
-------------------

New features:
- Support for group level parameters, required by CUP running the  Back-end
    Server version >= v1.4.0 (requires CAEN FELib >= v1.2.3).

Fixes:
- Fix critical issue in DPP-ZLE decode.

Changes:
- Demo released under the public domain (MIT No Attribution license).
- Demo MSVC2015 projects now point to a generic 10.0 SDK instead of to
    specific version 10.0.16299.0.


v1.5.4 (07/12/2022)
-------------------

New features:
- Support for new DPP-ZLE CUPs.
- json to 3.11.2.
- Windows build environment updated: MSVC2019 16.11.17.

Fixes:
- Documentation and copyright notice updated.
- Major update of DPP-ZLE demo.
- Other minor fixes on other demo projects.

Changes:
- Remove support for legacy endpoint names on preliminary CUPs.


v1.5.3 (10/06/2022)
-------------------

New features:
- Support for counter info word of statistics events of DPP-PHA and DPP-PSD.
    The information can be accessed using two new fields TRIGGER_CNT and
    SAVED_EVENT_CNT on respective stats endpoints.
- Memory usage reduced when using decoded endpoint with wave trigger source
    disabled for all channels. In case a source is set during run, memory
    allocation will be done later, at cost of a minimal performance penalty.
    The feature applies to DPP-PHA and DPP-PSD. It is worth mentioning that
    that the same performance penalty is payed also when starting an
    acquisition without any enabled channel, enabling a channel during the run.
    This applies to DPP-PHA, DPP-PSD and Open DPP since the first version of
    this library.
- spdlog to 1.10.0.
- Added build tests for Clang 11, 12, 13 and 14, and for GCC 12.

Fixes:
- Fix regression on DPP-ZLE decode introduced on v1.5.2.
- Fix "w" command to wave plot, failing on events without waveform. This applies
    to DPP-PHA and DPP-PSD demo.
- Possible undefined behavior and SIGBUS when running on 32-bit ARM due to
    memory access with bad alignment.


v1.5.2 (19/05/2022)
-------------------

New features:
- New field SAMPLES_OVERLAPPED available on Scope events (scalar 3-bit unsigned
    integer).
- New fields FLUSH (scalar boolean) and AGGREGATE_COUNTER (scalar 24-bit unsigned
    integer) available on DPP-PHA, DPP-PSD, Open DPP and DPP-ZLE events. Their
    values are shared by all events in the aggregate, like the existing BOARD_FAIL.
    Even if not carrying information about the event itself, they can be used for
    advanced statistics and diagnostics. On DPP-ZLE, since events could be made
    of more aggregates, FLUSH is the or of all participating aggregates fields,
    just like BOARD_FAIL, while AGGREGATE_COUNTER is the counter of the first
    aggregate.
- Decoded endpoint performance improvements. The feature applies to all types
    of endpoints, but it is expecially effective for DPP-PHA, DPP-PSD and
    Open DPP.
- Memory usage reduced when using decoded endpoint.
- Windows build environment updated: MSVC2019 16.11.14, Boost 1.79.0, Inno Setup
    6.2.1.

Fixes:
- Fix build on big endian systems.


v1.5.1 (14/04/2022)
-------------------

New features:
- Support for CDC interface on Linux, to achieve maximum speed on USB3 also
    after a regression on RNDIS introduced on recent kernel versions.

Fixes:
- Improve robustness of decode of DPP-PHA and DPP-PSD special events: in case
    of hypotetical events in which the third word was not the last word, the
    decode did not complete the event leaving the buffer pointer not aligned
    to the beginning of the next event.
- More exhaustive compile time checks on the supported compilers to improve
    performance.
- Use fastest integer types provided by cstdint when appropriate.


v1.5.0 (29/03/2022)
-------------------

New features:
- Support for CAEN_FELib_HasData (requires CAEN FELib v1.2.0).
- Memory usage reduced when using decoded endpoint and record length
    lesser than the maximum record length allowed by the firmware. The
    feature applies to DPP-PHA and DPP-PSD firmwares.
- Memory usage reduced when using raw endpoint. The feature applies to
    Scope, DPP-PHA, DPP-PSD and DPP-ZLE firmwares.
- Decoder thread now is launched at arm only if decoded endpoint is
    active, then it is closed at clear or at close.
- In case CAEN_FELib_ReadData now returns an error if it is called while
    being called on the same endpoint by another thread.
- Support for single word DPP events. The feature applies to DPP-PHA,
    DPP-PSD and Open DPP.
- DPP-PSD demo.
- Debug logging information improved.

Fixes:
- Fix deadlock when clearing data after a run with events larger than
    2^26 bytes. The fix applies to Scope firmware.
- Fix a rare deadlock, introduced with v1.4.2, that may occur when
    clearing data.
- The patch to properly close the library on Windows, when all devices
    have not been closed, now is much more robust.
- Fix a buffer overflow occurring when disabling channels or reducing
    record length after an acquisition with data still to be read from
    the digitizer. The fix applies to Scope firmware.
- Fix proper connection closure at exit. This fixes also a crash in the
    demo when using USB, that may result either in an undefined behavior
    of in an assertion failure (only on Linux if compiled without
    --disable-assert).
- Fix build with SPDLOG_ACTIVE_LEVEL=SPDLOG_LEVEL_TRACE defined on
    preprocessor.
- Fixed support for literal IPv6 addresses in URL (RFC 2732) on Linux.
- Fix decode of additional headers of special events (start and stop),
    even if the information is not used on the decode process.
- Fix build on clang 3.8 with Boost < 1.71 (broken since v1.4.1)
- Revert JSON for Modern C++ to v3.10.2 to fix build on clang 3.9
    (broken since v1.4.3).
- Add checks for data consistency, also when assertions have been
    disabled (i.e. on Windows release builds and using --disable-assert
    on autoconf). In case of a critical error, logger (if enabled)
    prints a critical level message and then std::terminate is called.
- Improved robustness of decoded endpoint against data inconsistencies.
- DPP-ZLE decode performance improved.


v1.4.3 (07/02/2022)
-------------------

New features:
- JSON for Modern C++ to version v3.10.5

Fixes:
- The correction of the clear mechanism introduced in version v1.4.2 was
    not working properly when using raw endpoint.
- Autoconf configure script can be invoked also from other directories.


v1.4.2 (24/01/2022)
-------------------

New features:
- Resource version properly set for Windows DLL, setting both file version
    and product version fields to the library version.
- Performance improvements of the event decoding on Scope firmware.
- DPP-PSD support.
- Add N_EVENTS to raw endpoint to get the number of events in the blob. In
    case of firmware using aggregate events (DPP firmwares) it returns the
    number of aggregates.
- Add SPECIAL_EVENT field to Open DPP decoded endpoint.

Fixes:
- Fix severe bug in the clear mechanism, usually detected when starting a
    second acquisition, that was pretty common at high rate. It was
    generating heap corruption with consequent application crashes.
- Add support for events with no enabled channel on Scope firmware, now
    correctly passed to the user with all sizes on WAVEFORM_SIZE set to
    zero and EVENT_SIZE to 24.
- Fix waveform decoding on big endian systems.
- Improve performance of CAEN_FELib_ReadData returning CAEN_FELib_Timeout
    and CAEN_FELib_Stop.
- Fix a rare bug that might occour during debug.
- Microsoft Visual C++ Redistributable now installed with quiet flag on
    Windows setup.
- Improve memory usage when arming a new run with reduced record length.
    The fix applies to Scope and DPP-ZLE firmwares.
- Performance improvements of DPP-PHA decode on Linux for events with
    waveform payload.

Changes:
- On DPP-PHA and DPP-PSD decoded endpoints, now *_TYPE probe fields return
    values, still as U8, that are common for both firmwares. See
    dpp_probe_types.hpp for details. Integral values have been chosen to
    keep backward compatibility with existing code using DPP-PHA.
- Remove useless stdout logger.


v1.4.1 (17/11/2021)
-------------------

New features:
- Resource version properly set for Windows DLL.
- Various code documentation improvements.
- Performance improvements of the internal buffer resize during the
    data acquisition using a custom `std::vector` allocator that performs
    default initialization instead of value inizialization.
- Support of OpenData endpoint for OpenFPGA implementations.

Fixes:
- Fixed library unload when program is closed before all connected deviced
    have been manually disconnected with CAEN_FELib_Close().
- Fix a rare bug that might occour on CAEN_FELib_ReadData() failures.

Changes:
- Requires CAEN FELib v1.1.4 and its new type CAEN_FELib_NodeType_t that
    replaces the deprecated CAEN_FELib_nodeType_t.
- Removed check for device already opened that returned error code
    CAEN_FELib_DeviceAlreadyOpen, since it is legal to open twice the same
    device if the second connection is a monitor connection. Furthermore,
    the check for the device already opened was pretty weak, as based only
    on the name used on the connection path, that could be not unique in
    case of multiple DNS entries or IP used instead of hostname.


v1.4.0 (15/09/2021)
-------------------

New features:
- Log level can be specified for each client using log_level in url query,
    by default it is set to off.
- Support for BackEnd Server 1.3.0 and CAEN FELib 1.1.3, in particular for
    the VGA node type support.
- Communication errors raise ::CAEN_FELib_CommunicationError error.

Fixes:
- Fix value of _WIN32_WINNT macro used to build Boost.ASIO, now specifiying
    correctly Windows 8.1.
- Linux package improved.
- Demo build fixed on Linux distributions not supporting C11 threads.

Changes:
- Windows setup install DLL to %ProgramFiles%\CAEN\Digitizers\CAEN Dig2\bin
    folder instead of [...]\lib.


v1.3.0 (16/06/2021)
-------------------

New features:
- New statistics endpoint support for DPP-PHA at /endpoint/dpppha/stats,
    currently supporting REAL_TIME, LIVE_TIME and DEAD_TIME (and respective
    *_NS versions providing time in nanoseconds).
- DPP-ZLE demo.
- New endpoint data format types char ("CHAR"), ptrdiff_t ("PTRDIFF_T") and
    long double ("LONG DOUBLE").

Fixes:
- Support serialization of LVDS and VGA (requires server version >= 1.2.0).
- -Wall added to Autoconf build.


v1.2.6 (14/05/2021)
-------------------

New features:
- BOARD_FAIL field added to all DPP endpoints to get eventual fail status
    when the event has been recorded (already supported by Scope endpoint).

Fixes:
- Performance improvement of DPP-PHA and Open DPP.
- Workaround to avoid long compilation time with GCC due to GCC bug 71165.
- Fix RECORD_LENGTH field of DPP-ZLE that was scaled by a factor 4.
- Fix trivial bug on DPP-PHA demo.

Changes:
- Type of DIGITAL_PROBE_* in default data format of DPP-PHA endpoint changed
    from BOOL to U8; this should not break existing code using default data
    format due to identical binary representation of bool and a uint8_t with
    values 0 or 1.


v1.2.5 (03/05/2021)
-------------------

New features:
- Demo projects largely improved. Plot added to DPP-PHA (gnuplot is included
    in Windows, must be installed by the user on Linux).
- Support for DPP-ZLE.
- TIMESTAMP_NS field added to all endpoints to get timestamp in nanoseconds.

Fixes:
- Performance of DPP-PHA decoded ReadData improved, expecially for high rate.
- Clear could hang forever when invoked in DPP-family firmwares.
- Fix rare segmentation fault when invoking Close very close to Open.


v1.2.4 (01/04/2021)
-------------------

Fixes:
- Linux and Windows packages improved.
- Demo now can read board path from command arguments.
- Failed assertions invoke std::abort instead of std::terminate.
- Boost.ASIO targeting to Windows 8.1 (previously Windows 7).


v1.2.3 (26/03/2021)
-------------------

New features:
- DPP-PHA demo working (no plotter).
- spdlog to 1.8.5.

Fixes:
- Server version alignment check does not trigger on different patch level.


v1.2.2 (24/03/2021)
-------------------

Fixes:
- Support for server version 1.1.3.


v1.2.1 (23/03/2021)
-------------------

New featured:
- First tentative implementation of DPP-ZLE decode, still to be tested.
- Resources added to Windows DLL.

Fixes:
- DPP-PHA readdata fixed in case of no waveform in the event
- DPP-PHA fake bit decode fixed.
- Connection after disconnection fixed by disabling automatic registration
    of spglog loggers.


v1.2.0 (18/03/2021)
-------------------

Breaking changes:
- New endpoint paths:
  - Raw endpoint still at /endpoint/raw.
  - Decoded endpoint at /endpoint/<firmware type>.
  - /endpoint/raw/par/isdecoded moved to /endpoint/par/activeendpoint, with
      allowed values raw or <firmware type>.

New features:
- Support for GCC 5 with optional compliance to C++14: C++17 features used
    only if available.
- Compile time reduced.
- DPP-PHA decode performance improvement.

Fixes:
- Multiple connection fixed.


v1.1.0 (04/03/2021)
-------------------

New features:
- GetDeviceTree implemented.
- Preliminary DPP-PHA support.
- Conformant URL support as Open argument.
- Monitor client passing monitor as URL query (e.g. dig2://192.0.2.1/?monitor).
- Log on file disabled by default (SPDLOG_LEVEL environmental variable can be
    used to enable it). Furthermore, TRACE and DEBUG messages are not compiled by
    default but can be enabled by defining SPDLOG_ACTTIVE_LEVEL=0 at compile time.
    See spdlog documentation for details.

Changes:
- Scope decoded endpoint renamed from /endpoint/raw/waveform /endpoint/raw/scope
    (but the decoded endpoint paths will change again in a future release).
- EVENT_COUNTER renamed to TRIGGER_ID in Scope decode data format.
- HAS_WAVEFORM removed from Scope decode data format, as the same information
    is retrievable from WAVEFORM_SIZE.
- Code is almost all C++14 conformant for compatibility with old compilers.
    Standard will change in a future release.


v1.0.3 (21/01/2021)
-------------------

First public release.
